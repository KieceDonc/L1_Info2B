package jeumemory.ui;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.Timer;
import jeumemory.Erreur;
import jeumemory.Famille;
import jeumemory.Joueur;
import jeumemory.LesJoueurs;
import jeumemory.LesPersonnages;
import jeumemory.Personnage;
import jeumemory.PlateauJeu;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Valentin
 */
public class JeuMemory extends javax.swing.JFrame {
    
    private static final String TAG = JeuMemory.class.getName();
    
    private LesJoueurs lstPlayers = new LesJoueurs();
    private LesPersonnages lstPerso;
    private PlateauJeu plateau;
    
    private int difficultyLvl;
    private int l1, c1, l2, c2;// pour les cartes sélectionnées à chaque tour de jeu
    
    /**
     * Creates new form Exo3
     */
    public JeuMemory() {
        initComponents();
        l1=-1;
        c1=-1;
        l2=-1;
        c2=-1;     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        demarrer = new javax.swing.JButton();
        recommencer = new javax.swing.JButton();
        jPanelPlateau = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Options = new javax.swing.JMenuItem();
        AjoutJoueur = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Joueur = new javax.swing.JMenuItem();
        Cartes = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        Transfert_Test = new javax.swing.JMenuItem();
        Bataille_Test = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(3, 1));

        jLabel1.setText("Work in progress");
        jPanel1.add(jLabel1);

        jLabel2.setText("WIP");
        jPanel1.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("WIP");
        jPanel1.add(jLabel3);

        jPanel4.add(jPanel1, java.awt.BorderLayout.NORTH);

        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setRows(5);
        jScrollPane1.setViewportView(jTextAreaInfo);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        demarrer.setText("Démarrer");
        demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demarrerActionPerformed(evt);
            }
        });
        jPanel2.add(demarrer);

        recommencer.setText("Recommencer");
        recommencer.setEnabled(false);
        jPanel2.add(recommencer);

        jPanel4.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.WEST);

        jPanelPlateau.setLayout(new java.awt.GridLayout(4, 5));
        getContentPane().add(jPanelPlateau, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Paramètres");

        Options.setText("Options");
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });
        jMenu1.add(Options);

        AjoutJoueur.setText("Ajout joueur");
        AjoutJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjoutJoueurActionPerformed(evt);
            }
        });
        jMenu1.add(AjoutJoueur);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Visualiser");

        Joueur.setText("Joueur");
        Joueur.setEnabled(false);
        Joueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoueurActionPerformed(evt);
            }
        });
        jMenu2.add(Joueur);

        Cartes.setText("Cartes");
        Cartes.setEnabled(false);
        Cartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CartesActionPerformed(evt);
            }
        });
        jMenu2.add(Cartes);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Test");

        Transfert_Test.setText("Transfert");
        Transfert_Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Transfert_TestActionPerformed(evt);
            }
        });
        jMenu3.add(Transfert_Test);

        Bataille_Test.setText("Bataille");
        Bataille_Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bataille_TestActionPerformed(evt);
            }
        });
        jMenu3.add(Bataille_Test);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        JDialog opt = new InitDialog(this,true,new InitDialog.setOnOptSelected() {
        @Override
        public void onOptSelected(LesJoueurs lj, int difficulty) { // on ajoute un écouteur qui permet de savoir quand l'utilisateur a fini de sélectionner des options
            try { // on essaye d'ajouter une liste de joueur
                lstPlayers.ajouteJoueurs(lj);
            } catch (Exception ex) { // si un joueur est déjà présent dans la liste on affiche une erreur indiquant qu'aucun joueur n'a été ajouté
                showErrorDlg(Erreur.OnePlayerAlreadyInTheList);
            }
            difficultyLvl = difficulty; // on change le niveau de difficulté par rapport à ce que l'utilisateur a choisit
            if(difficultyLvl!=0){
                lstPerso = new LesPersonnages(difficulty);    
            }
        }
        });
        opt.setVisible(true);
    }//GEN-LAST:event_OptionsActionPerformed

    private void JoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoueurActionPerformed
        VisuJoueursDlg visuJoueursDlg = new VisuJoueursDlg(this,true,lstPlayers);
        visuJoueursDlg.setVisible(true);    
    }//GEN-LAST:event_JoueurActionPerformed

    private void demarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demarrerActionPerformed
        if(lstPlayers.getNbJoueurs()>=2){ // pour démarrer le jeu, il doit y avoir au moins 2 joueurs
            if(difficultyLvl!=0){
                if(lstPlayers.arePlayersValidCompareToDifficulty(difficultyLvl)){ // on vérifie si les joueurs ont tous choisi une famille préférée qui est dans le niveau de difficulté
                    demarrer.setEnabled(false); // on supprime la possibilité de réappuyer sur le boutton démarré
                    Options.setEnabled(false); // on supprime la possibilité de réappuyer sur le boutton démarré
                    AjoutJoueur.setEnabled(false);  // on supprime la possibilité de réappuyer sur le boutton ajouté un joueur
                    recommencer.setEnabled(true); 
                    Joueur.setEnabled(true); // Le bouton joueur dans le menu option menu est maintenant disponible 
                    Cartes.setEnabled(true); // Le bouton cartes dans le menu option menu est maintenant disponible
                    plateau = new PlateauJeu(difficultyLvl);
                    jPanelPlateau.setLayout(new GridLayout(plateau.getNbLig(),plateau.getNbCol()));
                    for(int x=0;x<difficultyLvl;x++){
                        JButton current = new JButton();
                        current.setName(String.valueOf(x));
                        current.addActionListener(new ActionListener(){
                            @Override
                            public void actionPerformed(ActionEvent evt){
                                boutonActionPerformed(evt);
                            }
                        });
                        jPanelPlateau.add(current);
                    }
                    this.pack();
                }else{
                    showErrorDlg(Erreur.PlayerSelectedFamillyNotInRange);
                }
            }else{
                showErrorDlg(Erreur.mustChooseDifficulty);
            }   
        }else{
            jTextAreaInfo.setText(Erreur.youMustSelectTwoPlayer);
        }
    }//GEN-LAST:event_demarrerActionPerformed

    private void AjoutJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutJoueurActionPerformed
        if(difficultyLvl!=0){
            SaisieJoueurDlg saisieJoueurDlg = new SaisieJoueurDlg(this, true, lstPerso,new SaisieJoueurDlg.setOnNewPlayerCreated() {
                @Override
                public void onNewPlayerCreated(jeumemory.Joueur newPlayer) {
                    try {
                        System.out.println(TAG+" new Player added : "+newPlayer.toString());
                        lstPlayers.ajouteJoueur(newPlayer);
                    } catch (Exception ex) { // L'utilisateur essaye d'ajouté un joueur déjà présent dans la liste des joueurs
                        showErrorDlg(Erreur.playerAlreadyInDataBase);
                        System.out.println(TAG+" trying to add a player who's already in the list"+newPlayer.toString()+"\n"+ex.toString());
                    }
                }
            });
            saisieJoueurDlg.setVisible(true);
        }else{ // L'utilisateur essaye d'ajouté un joueur mais n'a pas sélectionné de niveau de difficulté. ( il faut un niveau de difficulté pour famille préféré )
            showErrorDlg(Erreur.mustChooseDifficulty);
        }
    }//GEN-LAST:event_AjoutJoueurActionPerformed

    private void CartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CartesActionPerformed
        Joueur j=new Joueur("FanMemory",new ImageIcon(getClass().getResource("/jeumemory/img/anonyme.jpg")));
        j.initPaquetTest();         
        VisuPersonnagesDlg visuPersonnagesDlg = new VisuPersonnagesDlg(this,true,j);
        visuPersonnagesDlg.setVisible(true);
    }//GEN-LAST:event_CartesActionPerformed

    private void Transfert_TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Transfert_TestActionPerformed
        try {
            lstPlayers = new LesJoueurs();
            Joueur j1=new Joueur("FanMemory0", Famille.communs);
            j1.initPaquetTest();
            Joueur j2=new Joueur("FanMemory1", Famille.communs);
            j2.getPaquet().ajoutePerso(new Personnage(Famille.epiques, "burnout", 20));
            j2.getPaquet().ajoutePerso(new Personnage(Famille.epiques, "funk-ops", 30));
            j2.getPaquet().ajoutePerso(new Personnage(Famille.alpinsFemmes, "mogul-master", 10));
            this.lstPlayers.ajouteJoueur(j1);
            this.lstPlayers.ajouteJoueur(j2);
            TransfertDlg diag = new TransfertDlg(this,true,lstPlayers,null);
            diag.setSize(600,600);

            diag.setVisible(true);
        } catch (Exception ex) {
            System.out.println(TAG+": This shouldn't been call ( Transfert_TestActionPerformed() )");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Transfert_TestActionPerformed

    private void Bataille_TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bataille_TestActionPerformed
        // ajout de cartes aux2 premiers joueurs 
        try {
            lstPlayers = new LesJoueurs();
            Joueur j1=new Joueur("FanMemory0", Famille.communs);
            j1.initPaquetTest();
            Joueur j2=new Joueur("FanMemory1", Famille.communs);
            j2.getPaquet().ajoutePerso(new Personnage(Famille.epiques, "burnout", 20));
            j2.getPaquet().ajoutePerso(new Personnage(Famille.epiques, "funk-ops", 30));
            j2.getPaquet().ajoutePerso(new Personnage(Famille.alpinsFemmes, "mogul-master", 10));
            this.lstPlayers.ajouteJoueur(j1);
            this.lstPlayers.ajouteJoueur(j2);
            BatailleDlg diag = new BatailleDlg(this, true,lstPlayers,0);
            diag.setSize(1000,600);
            diag.setVisible(true);
        } catch (Exception ex) {
            System.out.println(TAG+": This shouldn't been call ( Bataille_TestActionPerformed() )\n");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Bataille_TestActionPerformed

    private void boutonActionPerformed(java.awt.event.ActionEvent evt){
        JButton current = (JButton) evt.getSource(); // on récupère le bouton qui a été cliqué
        String num = current.getName(); // on réucpère le numéro du bouton
        int[] position = plateau.getCase(Integer.parseInt(num)); // on récupère la position du bouton par rapport au plateau
        Personnage perso = lstPerso.getPerso(plateau.getCase(position[0], position[1])); // on récupère le personnage qui correspond au button
        current.setIcon(new ImageIcon(perso.getPhoto())); // on affiche son image
        if(l1==-1&&c1==-1){ // on enregistre les coordonnées du boutton cliqué
            l1 = position[0];
            c1 = position[1];
        }else{
            l2 = position[0];
            c2 = position[1];
            startTimer();
        }
    }
    
    private void showErrorDlg(String error){
        ErrorDlg errorDlg = new ErrorDlg(this,true,error);
        errorDlg.setVisible(true);
    }
    
    public void startTimer(){// définit un timer qui lance la vérification des deux personnages au bout d'une demi-seconde
        Timer t = new Timer(500, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae){
                verifPersos();
            }
        });
        t.setRepeats(false);t.start();
    }
    
    public void verifPersos(){
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JeuMemory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AjoutJoueur;
    private javax.swing.JMenuItem Bataille_Test;
    private javax.swing.JMenuItem Cartes;
    private javax.swing.JMenuItem Joueur;
    private javax.swing.JMenuItem Options;
    private javax.swing.JMenuItem Transfert_Test;
    private javax.swing.JButton demarrer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelPlateau;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaInfo;
    private javax.swing.JButton recommencer;
    // End of variables declaration//GEN-END:variables

}
